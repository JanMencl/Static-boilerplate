/**
 * Created by dancen on 15/05/16.
 */
module.exports = function(grunt) {

  // Project configuration.
    grunt.initConfig({
        pkg: grunt.file.readJSON('package.json'),

        mkdir: {
            assets: {
                options: {
                    create: [
                        'assets',
                        'assets/css',
                        'assets/js',
                        'assets/fonts',
                        'assets/img',
                        'assets/img/icons',
                        'assets/scss',
                        'assets/css/vendor',
                        'assets/js/includes',
                        'assets/js/modules',
                        'assets/js/vendor'
                    ]
                }
            }
        },
        concat: {
            options: {
                stripBanners: true,
                banner: '/*! <%= pkg.name %> - v<%= pkg.version %> - ' +
                '<%= grunt.template.today("yyyy-mm-dd") %> */'
            },
            main_js:{
                src: ['assets/js/vendor/*.js', 'assets/js/includes/*.js'],
                dest: 'assets/js/main.js'
            },
            main_css:{
                src: ['assets/css/vendor/*', 'assets/css/style.css'],
                dest: 'assets/css/style.css'
            }
        },
        sass: {
            main: {
                options: {
                    style: 'expanded'
                },

                files: {
                    'assets/css/style.css': 'assets/scss/style.scss'
                }
            }
        },
        cssmin: {
            options: {
                shorthandCompacting: false,
                roundingPrecision: -1
            },
            main: {
                files: {
                    'style.min.css': 'assets/css/style.css'
                }
            }
        },
        autoprefixer:{
            options: {
                browsers: ['last 2 versions', 'ie 8', 'ie 9', '> 1%']
            },
            dist:{
                files:{
                    'assets/css/style.css':'assets/css/style.css'
                }
            }
        },
        uglify: {
            main: {
                files: {
                    'assets/js/main.min.js': 'assets/js/main.js'
                }
            }
        },
        clean: {
            main_css: ['style.css', 'assets/css/raw-style.css', 'assets/css/style.css', 'style.min.css'],
            main_all_js: ['assets/js/main.js', 'assets/js/main.min.js']
        },
        watch: {
            main: {
                options: {
                    spawn: false
                },
                files: ['assets/js/includes/*.js', 'assets/scss/*.scss'],
                tasks: ['main_default']
            }
        },
        template: {
            scss: {
                options: {
                    data: {
                        intro: 'This is main .scss file, include all other .scss files into this file'
                    }
                },
                files: {
                    'assets/scss/style.scss': ['Templates/assets/style.scss.tpl']
                }
            },
            css: {
                options: {
                    data: {
                        intro: 'This is main .css file (after watch -> style.min.css), this file is being generated from assets/scss/style.scss'
                    }
                },
                files: {
                    'assets/css/style.css': ['Templates/assets/style.css.tpl']
                }
            },
            js: {
                options: {
                    data: {
                        intro: 'This is main .js file (after watch -> main.min.js), this file is being generated by including all assets/js/includes and assets/js/vendor files'
                    }
                },
                files: {
                    'assets/js/main.js': ['Templates/assets/main.js.tpl']
                }
            },
            html: {
                options: {
                    data: {
                        intro: 'Comming soon'
                    }
                },
                files: {
                    'index.html': ['Templates/html/index.html.tpl'],
                    '404.html': ['Templates/html/404.html.tpl']
                }
            }
        },
        copy: {
            animate: {
                options: {},
                files: {
                    'assets/css/vendor/animate.min.css': ['bower_components/animate.css/animate.min.css'],
                }
            },
            fontawesome: {
                options: {},
                files: {
                    'assets/css/vendor/font-awesome.min.css': ['bower_components/fontawesome/css/font-awesome.min.css'],
                    'assets/fonts/FontAwesome.otf': ['bower_components/fontawesome/fonts/FontAwesome.otf'],
                    'assets/fonts/fontawesome-webfont.eot': ['bower_components/fontawesome/fonts/fontawesome-webfont.eot'],
                    'assets/fonts/fontawesome-webfont.svg': ['bower_components/fontawesome/fonts/fontawesome-webfont.svg'],
                    'assets/fonts/fontawesome-webfont.ttf': ['bower_components/fontawesome/fonts/fontawesome-webfont.ttf'],
                    'assets/fonts/fontawesome-webfont.woff': ['bower_components/fontawesome/fonts/fontawesome-webfont.woff'],
                    'assets/fonts/fontawesome-webfont.woff2': ['bower_components/fontawesome/fonts/fontawesome-webfont.woff2'],
                }
            },
            jquery: {
                options: {},
                files: {
                    'assets/js/vendor/jquery.min.js': ['bower_components/jquery/dist/jquery.min.js'],
                }
            },
            bootstrap: {
                options: {},
                files: {
                    'assets/css/vendor/bootstrap.min.css': ['node_modules/bootstrap/dist/css/bootstrap.min.css'],
                    'assets/js/vendor/bootstrap.min.js': ['node_modules/bootstrap/dist/css/bootstrap.min.js'],
                }
            }
        }

    });

    // Loading all grunt helpers
    grunt.loadNpmTasks('grunt-contrib-concat');
    grunt.loadNpmTasks('grunt-contrib-cssmin');
    grunt.loadNpmTasks('grunt-contrib-sass');
    grunt.loadNpmTasks('grunt-contrib-uglify');
    grunt.loadNpmTasks('grunt-contrib-watch');
    grunt.loadNpmTasks('grunt-autoprefixer');
    grunt.loadNpmTasks('grunt-contrib-clean');
    grunt.loadNpmTasks('grunt-mkdir');
    grunt.loadNpmTasks('grunt-template');
    grunt.loadNpmTasks('grunt-copy');



    //registering main Task
    grunt.registerTask('main_default', [
        'clean:main_all_js',
        'clean:main_css',
        'concat:main_js',
        'sass:main',
        'concat:raw_css',
        'concat:extra_css',
        'autoprefixer',
        'cssmin:main',
        'uglify:main',
        'uglify:vendor'
    ]);

    //registering watch Task
    grunt.registerTask('watch_main', 'watch:main');


    //registering project Init
    //1) Create tree filesystem
    //2) Create all template files
    //3) Pulling all vendor files
    grunt.registerTask('project_init', [
        'mkdir:assets',
        'generate_template_files',
        'pull_vendor_files'
    ]);

    //Creating template files
    grunt.registerTask('generate_template_files', [
        'template:css',
        'template:js',
        'template:scss',
        'template:html'
    ]);

    //Pulling vendor files
    grunt.registerTask('pull_vendor_files', [
        'copy:animate',
        'copy:fontawesome',
        'copy:jquery',
        'copy:bootstrap'
    ]);

    grunt.registerTask('migrate_to_wp', [
        /*TODO dodÄ›lat migrate to WP Task*/
    ]);

};